<RadzenCard class="@Class" Style="@($"border: 1px solid {MealColor}")">
	<p class="fs-5" style="color: @MealColor;"><b>@MealTitle</b></p>

	@if (IsLoading) {
		@ChildContent
	}
	else if (MealData == null || MealData.FoodItems.Count == 0) {
		<p class="text-center mb-4"><b>Menu unavailable</b></p>
	}
	else {
		if (MealData.Theme != null) {
			<p style="color: @MealColor;" class="mt-2">@MealData.Theme</p>
		}

		<div class="mt-4">
			@foreach (var kvp in MealData.FoodItems) {
				<p class="mt-3" style="font-size: 0.7em;">@kvp.Key.ToUpper()</p>
				<p style="color: @MealColor;">
					@* HTML wont render the newlines so we need to manually insert breaks here. *@
					@foreach (var line in kvp.Value.Split("\r\n")) {
						<b>@line.Trim()</b><br/>
					}
				</p>
			}
		</div>
	}
</RadzenCard>

@code {
	/// <summary> If <see langword="true"/>, the component will render the child content instead of the meals. </summary>
	[Parameter]
	public bool IsLoading { get; set; } = false;

	/// <summary> String to display at the top of the card, e.g. "Breakfast". </summary>
	[Parameter]
	public string MealTitle { get; set; } = "";

	/// <summary>
	/// Specifies the color to use for the border and text items. Defaults to black. <br/>
	/// Must be in a valid CSS color format (e.g. <b>#ff0812</b>) as it will be passed directly to the component's CSS.
	/// </summary>
	[Parameter]
	public string MealColor { get; set; } = "#000000";

	/// <summary>
	/// The meal data to render. This will contain food items and a theme. <br />
	/// If null, or no food items exist, a "no data" message will be displayed.
	/// </summary>
	[Parameter]
	public Meal? MealData { get; set; }

	/// <summary> Child content renders when <see cref="IsLoading" /> is <see langword="true"/>. </summary>
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	/// <summary> Additional CSS classes to add onto the root <see cref="RadzenCard" /> element. </summary>
	[Parameter]
	public string Class { get; set; } = "";
}
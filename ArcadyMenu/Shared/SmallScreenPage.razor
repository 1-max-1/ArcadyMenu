@inject IDataService dataService

@if (isInErrorState) {
	<div class="d-flex flex-column align-items-center mt-5">
		<p>Something went wrong.</p>
		<RadzenButton Click="@(() => LoadMealPlan(selectedWeek))">Retry</RadzenButton>
	</div>
}
else {
	<div class="d-flex justify-content-center mb-2 mx-1">
		<p class="me-2 mb-0 align-self-center" style="font-size: 0.95em;">Menu for the week of:</p>
		<RadzenDatePicker TValue="DateTime" ShowTime="@false" Value="@selectedWeek" Change="@OnDateChanged" DateFormat="dd/MM/yyyy" Style="width: 160px;" />
	</div>

	<RadzenTabs SelectedIndex="@selectedTabIndex" Change="@OnTabIndexChanged">
		<Tabs>
			@{
				int index = 0;
			}
			@foreach (string dayOfWeek in daysOfTheWeek) {
				int i = index;
				index++;

				@* Only render a meal plan for the active tab, otherwise we are wasting resources *@
				<RadzenTabsItem Text="@dayOfWeek">
					@if (i == selectedTabIndex) {
						<DayMealsView DayMealPlan="@mp" IsLoading="@isLoading" />
					}
				</RadzenTabsItem>
			}
		</Tabs>
	</RadzenTabs>
}

@code {
	private readonly string[] daysOfTheWeek = { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };

	private DateTime selectedWeek = DateTime.Now;
	private int selectedTabIndex = 0;

	private MealPlan? mp;
	private bool isLoading = true;
	private bool isInErrorState = false;

	protected override async Task OnInitializedAsync() {
		Console.WriteLine("SmallScreenPage OnInitializedAsync");
		await LoadMealPlan(selectedWeek);
	}

	// Grabs meal plan from backend then loads the data into the variables. Handles loading and error variables.
	private async Task LoadMealPlan(DateTime date) {
		isInErrorState = false;
		isLoading = true;
		try {
			mp = await dataService.GetMealPlanForDay(date);
		}
		catch (HttpRequestException) {
			isInErrorState = true;
		}
		isLoading = false;
	}

	private async Task OnDateChanged(DateTime? dateVal) {
		DateTime date = dateVal!.Value;
		selectedWeek = dataService.GetStartOfWeek(date);
		selectedTabIndex = (7 + (int)date.DayOfWeek - 1) % 7;
		await LoadMealPlan(date);
	}

	private async Task OnTabIndexChanged(int index) {
		selectedTabIndex = index;
		await LoadMealPlan(selectedWeek.AddDays(index));
	}
}